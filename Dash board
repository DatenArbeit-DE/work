from dash import Dash, html, dcc
from dash.dependencies import Input, Output
import pandas as pd
import plotly.express as px

# Load data
data = pd.read_csv(
    'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')

# Initialize Dash app
app = Dash(__name__)

# Year list
year_list = [i for i in range(1980, 2024, 1)]

# App layout
app.layout = html.Div([
    # Task 2.1: Add title
    html.H1("Automobile Sales Statistics Dashboard",
            style={'textAlign': 'center',
                   'color': '#503D36',
                   'font-size': 24}),

    # Task 2.2: Add two dropdown menus
    html.Div([
        html.Label("Select Statistics:"),
        dcc.Dropdown(
            id='dropdown-statistics',
            options=[
                {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},
                {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'}
            ],
            value='Select Statistics',
            placeholder='Select report type',
            style={
                'width': '80%',
                'padding': '3px',
                'font-size': '20px',
                'text-align': 'center'
            }
        )
    ]),

    html.Div([
        dcc.Dropdown(
            id='select-year',
            options=[{'label': str(i), 'value': i} for i in year_list],
            placeholder='Select year',
            style={
                'width': '80%',
                'padding': '3px',
                'font-size': '20px',
                'text-align': 'center'
            }
        )
    ]),

    # Output container
    html.Div(id='output-container', className='chart-grid', style={'display': 'flex', 'flex-direction': 'column'})
])


# Task 2.4: Callback - Control year dropdown
@app.callback(
    Output('select-year', 'disabled'),
    Input('dropdown-statistics', 'value'))
def update_input_container(selected_statistics):
    return selected_statistics != 'Yearly Statistics'


# Task 2.5 & 2.6: Main callback
@app.callback(
    Output('output-container', 'children'),
    [Input('dropdown-statistics', 'value'),
     Input('select-year', 'value')])
def update_output_container(selected_statistics, input_year):
    if selected_statistics == 'Recession Period Statistics':
        # Task 2.5: Recession statistics charts
        recession_data = data[data['Recession'] == 1]

        # Chart 1: Yearly sales fluctuation
        yearly_rec = recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        R_chart1 = dcc.Graph(
            figure=px.line(yearly_rec,
                           x='Year',
                           y='Automobile_Sales',
                           title="Automobile Sales Fluctuation During Recession Periods"))

        # Chart 2: Average sales by vehicle type
        avg_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        R_chart2 = dcc.Graph(
            figure=px.bar(avg_sales,
                          x='Vehicle_Type',
                          y='Automobile_Sales',
                          title="Average Vehicles Sold by Vehicle Type During Recession"))

        # Chart 3: Advertisement expenditure share
        exp_rec = recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        R_chart3 = dcc.Graph(
            figure=px.pie(exp_rec,
                          values='Advertising_Expenditure',
                          names='Vehicle_Type',
                          title="Advertisement Expenditure Share by Vehicle Type During Recession"))

        # Chart 4: Unemployment rate impact
        unemp_data = recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])[
            'Automobile_Sales'].mean().reset_index()
        R_chart4 = dcc.Graph(
            figure=px.bar(unemp_data,
                          x='unemployment_rate',
                          y='Automobile_Sales',
                          color='Vehicle_Type',
                          title="Impact of Unemployment Rate on Vehicle Type Sales During Recession"))

        return [
            html.Div(className='chart-row', children=[R_chart1, R_chart2], style={'display': 'flex'}),
            html.Div(className='chart-row', children=[R_chart3, R_chart4], style={'display': 'flex'})
        ]

    elif selected_statistics == 'Yearly Statistics' and input_year:
        # Task 2.6: Yearly statistics charts
        yearly_data = data[data['Year'] == input_year]

        # Chart 1: Historical trend
        yas = data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        Y_chart1 = dcc.Graph(
            figure=px.line(yas,
                           x='Year',
                           y='Automobile_Sales',
                           title="Historical Trend of Automobile Sales"))

        # Chart 2: Monthly sales
        mas = yearly_data.groupby('Month')['Automobile_Sales'].sum().reset_index()
        Y_chart2 = dcc.Graph(
            figure=px.line(mas,
                           x='Month',
                           y='Automobile_Sales',
                           title=f"Monthly Automobile Sales in {input_year}"))

        # Chart 3: Vehicle type distribution
        avr_data = yearly_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()
        Y_chart3 = dcc.Graph(
            figure=px.bar(avr_data,
                          x='Vehicle_Type',
                          y='Automobile_Sales',
                          title=f"Average Vehicles Sold by Vehicle Type in {input_year}"))

        # Chart 4: Advertisement expenditure
        exp_data = yearly_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum().reset_index()
        Y_chart4 = dcc.Graph(
            figure=px.pie(exp_data,
                          values='Advertising_Expenditure',
                          names='Vehicle_Type',
                          title=f"Advertisement Expenditure Distribution by Vehicle Type in {input_year}"))

        return [
            html.Div(className='chart-row', children=[Y_chart1, Y_chart2], style={'display': 'flex'}),
            html.Div(className='chart-row', children=[Y_chart3, Y_chart4], style={'display': 'flex'})
        ]

    else:
        return None


# Run app
if __name__ == '__main__':
    app.run_server(debug=True, host='0.0.0.0', port=8050)
